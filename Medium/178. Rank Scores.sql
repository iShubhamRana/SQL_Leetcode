QUESTION: https://leetcode.com/problems/rank-scores/


#APPROACH 1: USING DENSE_RANK WINDOW FUNCTION
#1. JUST GOES IN ORDER , AND PROVIDES RANK

SELECT 
    S.score,
    DENSE_RANK() OVER (
        ORDER BY
            S.score DESC
    ) AS 'rank'
FROM
    Scores S;




#APPROACH2: USING SUBQUERY
#1. FOR EACH SCORE , WE JUST NEED TO CALCULATE THE NUMBER OF DISTINCT SCORES WHICH ARE GREATER THAN THE CURRENT SCORE
#2. A SIMPLE SUBQUERY CAN BE USED TO FIND THE DISTINCT SCORES GREATER THAN THE CURRENT


SELECT S1.score,
(
    SELECT COUNT(DISTINCT S2.score)
    FROM
        Scores S2
    WHERE 
        S2.score >= S1.score
) AS 'rank'
FROM Scores S1
ORDER BY
    S1.score DESC;


#APPROACH 3:
#SEE MOST OF THE TIMES SUBQUERY CAN BE CONVERTED TO A JOIN , WE CAN SIMPLY USE A INNER JOIN HERE AND COUNT FOR NUMBER OF SCORE >=

SELECT 
    S.score,
    COUNT(DISTINCT T.score) AS 'rank'
FROM
    Scores S
    INNER JOIN Scores T ON S.score <= T.Score
GROUP BY
    S.id , S.score
ORDER BY 
    S.SCORE DESC


